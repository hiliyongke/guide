"use strict";(self.webpackChunkguide_front_web=self.webpackChunkguide_front_web||[]).push([[489],{2763:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-abff6634",path:"/norm/js/react.html",title:"React&JSX 书写规范",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"基本规则",slug:"基本规则",children:[]},{level:3,title:"命名规范",slug:"命名规范",children:[]},{level:3,title:"Class Component VS Functional Component",slug:"class-component-vs-functional-component",children:[]},{level:3,title:"对齐",slug:"对齐",children:[]},{level:3,title:"空格",slug:"空格",children:[]},{level:3,title:"引号",slug:"引号",children:[]},{level:3,title:"属性",slug:"属性",children:[]},{level:3,title:"Refs",slug:"refs",children:[]},{level:3,title:"圆括号",slug:"圆括号",children:[]},{level:3,title:"标签",slug:"标签",children:[]},{level:3,title:"方法",slug:"方法",children:[]},{level:3,title:"Hooks 书写规范",slug:"hooks-书写规范",children:[]}],filePathRelative:"norm/js/react.md",git:{updatedTime:1637130328e3,contributors:[{name:"Accompany831143",email:"Accompany_zhao@163.com",commits:1}]}}},993:(n,s,a)=>{a.r(s),a.d(s,{default:()=>kn});var p=a(6252);const t=(0,p._)("h1",{id:"react-jsx-书写规范",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#react-jsx-书写规范","aria-hidden":"true"},"#"),(0,p.Uk)(" React&JSX 书写规范")],-1),e=(0,p._)("blockquote",null,[(0,p._)("p",null,"本规范基本基于标准的 JavaScript 语法规范")],-1),c=(0,p._)("h3",{id:"基本规则",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#基本规则","aria-hidden":"true"},"#"),(0,p.Uk)(" 基本规则")],-1),l=(0,p.Uk)("每个文件只包含一个 React 类组件 "),o=(0,p.Uk)("但是多个函数式组件可以放到一个文件中，eslint: "),u={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-multi-comp.md#ignorestateless",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("react/no-multi-comp"),i=(0,p._)("li",null,"一般使用 JSX 语法",-1),k=(0,p._)("li",null,[(0,p.Uk)("除非是在非 JSX 文件中初始化应用，否则不要使用 "),(0,p._)("code",null,"React.createElement")],-1),b=(0,p.uE)('<h3 id="命名规范" tabindex="-1"><a class="header-anchor" href="#命名规范" aria-hidden="true">#</a> 命名规范</h3><ul><li>组件文件扩展名</li></ul><p>如果使用 JavaScript，则文件扩展名为 <code>.js</code>；如果使用 <code>TypeScript</code>，则文件扩展名为 <code>.tsx</code></p><ul><li>组件文件名</li></ul><p>如果是组件文件，则使用 PascalCase，如 <code>MyComponent.js</code></p><p>如果组件是一个目录，则组件主入口命名为 <code>index</code>，如 <code>index.js</code></p><ul><li>引用命名</li></ul>',7),m=(0,p.Uk)("React 组件使用 PascalCase，组件实例使用 CamelCase，eslint: "),d={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md",target:"_blank",rel:"noopener noreferrer"},g=(0,p.Uk)("react/jsx-pascal-case"),h=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> reservationCard <span class="token keyword">from</span> <span class="token string">&#39;./ReservationCard&#39;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> ReservationCard <span class="token keyword">from</span> <span class="token string">&#39;./ReservationCard&#39;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> ReservationItem <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ReservationCard</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> reservationItem <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ReservationCard</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>组件命名</li></ul><p>使用文件名作为组件名字，例如, <code>ReservationCard.js</code> 应该包含名为 <code>ReservationCard</code> 的引用，然而对于文件夹中的根组件, 使用 <code>index.js</code> 作为文件名，使用文件夹的名字作为组件的名字</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> Footer <span class="token keyword">from</span> <span class="token string">&#39;./Footer/Footer&#39;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">import</span> Footer <span class="token keyword">from</span> <span class="token string">&#39;./Footer/index&#39;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> Footer <span class="token keyword">from</span> <span class="token string">&#39;./Footer&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>组件属性名</li></ul><p>React DOM 使用小驼峰式命名法来定义属性的名称，而不使用 HTML 属性名称的命名约定，例如</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handler<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="class-component-vs-functional-component" tabindex="-1"><a class="header-anchor" href="#class-component-vs-functional-component" aria-hidden="true">#</a> Class Component VS Functional Component</h3><p>只允许使用 <code>Class Component</code> 和 <code>Functional Component</code> 两种形态来书写组件，建议尽量使用函数式组件配合 Hooks 来进行开发</p><h3 id="对齐" tabindex="-1"><a class="header-anchor" href="#对齐" aria-hidden="true">#</a> 对齐</h3>',10),v=(0,p.Uk)("遵循以下JSX语法的对齐风格，eslint: "),f={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md",target:"_blank",rel:"noopener noreferrer"},x=(0,p.Uk)("react/jsx-closing-bracket-location"),y=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">superLongParam</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>bar<span class="token punctuation">&#39;</span></span>\n     <span class="token attr-name">anotherSuperLongParam</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>baz<span class="token punctuation">&#39;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n  <span class="token attr-name">superLongParam</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>bar<span class="token punctuation">&#39;</span></span>\n  <span class="token attr-name">anotherSuperLongParam</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>baz<span class="token punctuation">&#39;</span></span>\n<span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// if props fit in one line then keep it on the same line</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">bar</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>bar<span class="token punctuation">&#39;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// children get indented normally</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n  <span class="token attr-name">superLongParam</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>bar<span class="token punctuation">&#39;</span></span>\n  <span class="token attr-name">anotherSuperLongParam</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>baz<span class="token punctuation">&#39;</span></span>\n<span class="token punctuation">&gt;</span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Quux</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Foo</span></span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">// bad</span>\n<span class="token punctuation">{</span>showButton <span class="token operator">&amp;&amp;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token punctuation">{</span>\n  showButton <span class="token operator">&amp;&amp;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">{</span>showButton <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">{</span>showButton <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h3 id="空格" tabindex="-1"><a class="header-anchor" href="#空格" aria-hidden="true">#</a> 空格</h3>',2),j=(0,p.Uk)("自闭合的标签前要加一个空格，eslint: "),_={href:"https://eslint.org/docs/rules/no-multi-spaces",target:"_blank",rel:"noopener noreferrer"},w=(0,p.Uk)("no-multi-spaces"),C=(0,p.Uk)(", "),F={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md",target:"_blank",rel:"noopener noreferrer"},q=(0,p.Uk)("react/jsx-tag-spacing"),U=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span><span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// very bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>                 <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',1),S=(0,p.Uk)("不要在 JSX 的花括号里边加空格，eslint: "),R={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md",target:"_blank",rel:"noopener noreferrer"},P=(0,p.Uk)("react/jsx-curly-spacing"),E=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">bar</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span> baz <span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">bar</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>baz<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="引号" tabindex="-1"><a class="header-anchor" href="#引号" aria-hidden="true">#</a> 引号</h3><p>JSX 属性要使用单引号，与其他普通 JS 保持一致</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">bar</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">bar</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>bar<span class="token punctuation">&#39;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> left<span class="token operator">:</span> <span class="token string">&quot;20px&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> left<span class="token operator">:</span> <span class="token string">&#39;20px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h3><ul><li>属性名使用 CamelCase</li></ul><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n  <span class="token attr-name">UserName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>hello<span class="token punctuation">&#39;</span></span>\n  <span class="token attr-name">phone_number</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">12345678</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n  <span class="token attr-name">userName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>hello<span class="token punctuation">&#39;</span></span>\n  <span class="token attr-name">phoneNumber</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">12345678</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',7),T=(0,p.Uk)("当属性值为true时可以省略， eslint: "),W={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-boolean-value.md",target:"_blank",rel:"noopener noreferrer"},z=(0,p.Uk)("react/jsx-boolean-value"),J=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n  <span class="token attr-name">hidden</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n  <span class="token attr-name">hidden</span>\n<span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">hidden</span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',1),M=(0,p.Uk)("避免使用数组的索引作为 key 属性值, 建议使用稳定的ID，eslint: "),N={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-array-index-key.md",target:"_blank",rel:"noopener noreferrer"},L=(0,p.Uk)("react/no-array-index-key"),B=(0,p.Uk)("原因：不使用稳定的 ID 会对性能产生副作用并且组件状态会出问题，是一种"),H={href:"https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318",target:"_blank",rel:"noopener noreferrer"},I=(0,p.Uk)("反模式"),X=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token punctuation">{</span>todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Todo</span></span>\n    <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>todo<span class="token punctuation">}</span></span>\n    <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span>\n  <span class="token punctuation">/&gt;</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">{</span>todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Todo</span></span>\n    <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>todo<span class="token punctuation">}</span></span>\n    <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span>\n  <span class="token punctuation">/&gt;</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li>为所有的非必需属性定义使用 defaultProps 明确的默认值</li></ul><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token constant">SFC</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar<span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>foo<span class="token punctuation">}</span><span class="token punctuation">{</span>bar<span class="token punctuation">}</span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">}</span>\n<span class="token constant">SFC</span><span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n  foo<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n  bar<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>\n  children<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>node\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token constant">SFC</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar<span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>foo<span class="token punctuation">}</span><span class="token punctuation">{</span>bar<span class="token punctuation">}</span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">}</span>\n<span class="token constant">SFC</span><span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n  foo<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n  bar<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>\n  children<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>node\n<span class="token punctuation">}</span>\n<span class="token constant">SFC</span><span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>\n  bar<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n  children<span class="token operator">:</span> <span class="token keyword">null</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="refs" tabindex="-1"><a class="header-anchor" href="#refs" aria-hidden="true">#</a> Refs</h3>',4),D=(0,p.Uk)("避免使用字符串引用，请使用回调函数作为引用，eslint: "),O={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-string-refs.md",target:"_blank",rel:"noopener noreferrer"},A=(0,p.Uk)("react/no-string-refs"),V=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n  <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>myRef<span class="token punctuation">&#39;</span></span>\n<span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n  <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">ref</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myRef <span class="token operator">=</span> ref <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="圆括号" tabindex="-1"><a class="header-anchor" href="#圆括号" aria-hidden="true">#</a> 圆括号</h3>',2),Z=(0,p.Uk)("当 JSX 标签超过一行时使用圆括号包裹， eslint: "),Q={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/wrap-multilines.md",target:"_blank",rel:"noopener noreferrer"},Y=(0,p.Uk)("react/wrap-multilines"),G=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>\n<span class="token comment">// bad</span>\n<span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>long body<span class="token punctuation">&#39;</span></span> <span class="token attr-name">foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>bar<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n           </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyChild</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n         </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>long body<span class="token punctuation">&#39;</span></span> <span class="token attr-name">foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>bar<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyChild</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good, when single line</span>\n<span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">hello</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>body<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="标签" tabindex="-1"><a class="header-anchor" href="#标签" aria-hidden="true">#</a> 标签</h3>',2),K=(0,p.Uk)("没有子元素的标签请自闭合，eslint: "),$={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md",target:"_blank",rel:"noopener noreferrer"},nn=(0,p.Uk)("react/self-closing-comp"),sn=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>stuff<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Foo</span></span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>stuff<span class="token punctuation">&#39;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),an=(0,p.Uk)("如果组件包含多行属性，在新的一行闭合标签，eslint: "),pn={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md",target:"_blank",rel:"noopener noreferrer"},tn=(0,p.Uk)("react/jsx-closing-bracket-location"),en=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n  <span class="token attr-name">bar</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>bar<span class="token punctuation">&#39;</span></span>\n  <span class="token attr-name">baz</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>baz<span class="token punctuation">&#39;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n  <span class="token attr-name">bar</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>bar<span class="token punctuation">&#39;</span></span>\n  <span class="token attr-name">baz</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>baz<span class="token punctuation">&#39;</span></span>\n<span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h3><ul><li>使用箭头函数包裹本地变量</li></ul><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">ItemList</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span></span>\n          <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>key<span class="token punctuation">}</span></span>\n          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">doSomethingWith</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n        <span class="token punctuation">/&gt;</span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>类组件的内部方法不要使用下划线前缀</li></ul><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token keyword">class</span> <span class="token class-name">extends</span> React<span class="token punctuation">.</span>Component <span class="token punctuation">{</span>\n  <span class="token function">_onClickSubmit</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// do stuff</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// other stuff</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">extends</span> React<span class="token punctuation">.</span>Component <span class="token punctuation">{</span>\n  <span class="token function">onClickSubmit</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// do stuff</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// other stuff</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',6),cn=(0,p.Uk)("确保在 render 方法中存在返回值，eslint: "),ln={href:"https://github.com/yannickcr/eslint-plugin-react/pull/502",target:"_blank",rel:"noopener noreferrer"},on=(0,p.Uk)("require-render-return"),un=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>  <span class="token comment">// bad</span>\n  <span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// good</span>\n  <span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="hooks-书写规范" tabindex="-1"><a class="header-anchor" href="#hooks-书写规范" aria-hidden="true">#</a> Hooks 书写规范</h3><ul><li><p>Hooks 只能应用于函数式组件中</p></li><li><p>只在 React 函数最顶层使用 Hooks</p></li></ul><blockquote><p>不要在循环，条件或嵌套函数中调用 Hook， 确保总是在你的 React 函数的最顶层调用他们</p></blockquote><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">a</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">persistForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;formData&#39;</span><span class="token punctuation">,</span> accountName<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">x</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>timer<span class="token punctuation">,</span> setTimer<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// main logic</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">a</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">persistForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;formData&#39;</span><span class="token punctuation">,</span> accountName<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>timer<span class="token punctuation">,</span> setTimer<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">x</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token comment">// main logic</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>',5),rn={},kn=(0,a(3744).Z)(rn,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,e,c,(0,p._)("ul",null,[(0,p._)("li",null,[l,(0,p._)("ul",null,[(0,p._)("li",null,[o,(0,p._)("a",u,[r,(0,p.Wm)(a)])])])]),i,k]),b,(0,p._)("p",null,[m,(0,p._)("a",d,[g,(0,p.Wm)(a)])]),h,(0,p._)("p",null,[v,(0,p._)("a",f,[x,(0,p.Wm)(a)])]),y,(0,p._)("ul",null,[(0,p._)("li",null,[j,(0,p._)("a",_,[w,(0,p.Wm)(a)]),C,(0,p._)("a",F,[q,(0,p.Wm)(a)])])]),U,(0,p._)("ul",null,[(0,p._)("li",null,[S,(0,p._)("a",R,[P,(0,p.Wm)(a)])])]),E,(0,p._)("ul",null,[(0,p._)("li",null,[T,(0,p._)("a",W,[z,(0,p.Wm)(a)])])]),J,(0,p._)("ul",null,[(0,p._)("li",null,[M,(0,p._)("a",N,[L,(0,p.Wm)(a)])])]),(0,p._)("blockquote",null,[(0,p._)("p",null,[B,(0,p._)("a",H,[I,(0,p.Wm)(a)])])]),X,(0,p._)("p",null,[D,(0,p._)("a",O,[A,(0,p.Wm)(a)])]),V,(0,p._)("p",null,[Z,(0,p._)("a",Q,[Y,(0,p.Wm)(a)])]),G,(0,p._)("ul",null,[(0,p._)("li",null,[K,(0,p._)("a",$,[nn,(0,p.Wm)(a)])])]),sn,(0,p._)("ul",null,[(0,p._)("li",null,[an,(0,p._)("a",pn,[tn,(0,p.Wm)(a)])])]),en,(0,p._)("ul",null,[(0,p._)("li",null,[cn,(0,p._)("a",ln,[on,(0,p.Wm)(a)])])]),un],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);