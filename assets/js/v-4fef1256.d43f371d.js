"use strict";(self.webpackChunkguide_front_web=self.webpackChunkguide_front_web||[]).push([[279],{356:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-4fef1256",path:"/norm/js/language.html",title:"语言规范",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"类型",slug:"类型",children:[]},{level:3,title:"引用",slug:"引用",children:[]},{level:3,title:"对象",slug:"对象",children:[]},{level:3,title:"数组",slug:"数组",children:[]},{level:3,title:"解构赋值",slug:"解构赋值",children:[]},{level:3,title:"字符串",slug:"字符串",children:[]},{level:3,title:"函数",slug:"函数",children:[]},{level:3,title:"箭头函数",slug:"箭头函数",children:[]},{level:3,title:"类&构造函数",slug:"类-构造函数",children:[]},{level:3,title:"模块",slug:"模块",children:[]},{level:3,title:"迭代器",slug:"迭代器",children:[]},{level:3,title:"生成器",slug:"生成器",children:[]},{level:3,title:"对象属性",slug:"对象属性",children:[]},{level:3,title:"变量声明",slug:"变量声明",children:[]},{level:3,title:"Hoisting",slug:"hoisting",children:[]},{level:3,title:"比较运算符&相等",slug:"比较运算符-相等",children:[]},{level:3,title:"分号",slug:"分号",children:[]},{level:3,title:"标准特性",slug:"标准特性",children:[]},{level:3,title:"eval()",slug:"eval",children:[]},{level:3,title:"with() {}",slug:"with",children:[]},{level:3,title:"修改内置对象的原型",slug:"修改内置对象的原型",children:[]}],filePathRelative:"norm/js/language.md",git:{updatedTime:1637130328e3}}},4349:(n,s,a)=>{a.r(s),a.d(s,{default:()=>Rp});var p=a(6252);const e=(0,p.uE)('<h1 id="语言规范" tabindex="-1"><a class="header-anchor" href="#语言规范" aria-hidden="true">#</a> 语言规范</h1><p>JavaScript 是一种客户端脚本语言，这里列出了编写 JavaScript 时需要遵守的规则。</p><h3 id="类型" tabindex="-1"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h3><ul><li><p>原始类型: 存取原始类型直接作用于值本身</p><ul><li>布尔类型</li><li>Null 类型</li><li>Undefined 类型</li><li>数字类型</li><li>BigInt 类型</li><li>字符串类型</li><li>符号类型 Symbol</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token keyword">let</span> bar <span class="token operator">=</span> foo\n\nbar <span class="token operator">=</span> <span class="token number">9</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">)</span> <span class="token comment">// 1, 9</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>复杂类型: 访问复杂类型作用于值的引用</p><ul><li>object</li><li>array</li><li>function</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> foo\n\nbar<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bar<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 9, 9</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><h3 id="引用" tabindex="-1"><a class="header-anchor" href="#引用" aria-hidden="true">#</a> 引用</h3><ul><li>请记得 <code>const</code> 和 <code>let</code> 都是块级作用域，<code>var</code> 是函数级作用域</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// const and let only exist in the blocks they are defined in.</span>\n<span class="token punctuation">{</span>\n  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// ReferenceError</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// ReferenceError</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',7),t=(0,p.Uk)("对所有引用都使用 "),o=(0,p._)("code",null,"const",-1),c=(0,p.Uk)("，不要使用 "),l=(0,p._)("code",null,"var",-1),r=(0,p.Uk)("，eslint: "),u={href:"https://eslint.org/docs/rules/prefer-const.html",target:"_blank",rel:"noopener noreferrer"},i=(0,p.Uk)("prefer-const"),k=(0,p.Uk)(", "),b={href:"https://eslint.org/docs/rules/no-const-assign.html",target:"_blank",rel:"noopener noreferrer"},m=(0,p.Uk)("no-const-assign"),d=(0,p.uE)('<blockquote><p>原因：这样做可以确保你无法重新分配引用，以避免出现错误和难以理解的代码</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',2),g=(0,p.Uk)("如果引用是可变动的，使用 "),f=(0,p._)("code",null,"let",-1),v=(0,p.Uk)(" 代替 "),y=(0,p._)("code",null,"var",-1),h=(0,p.Uk)("，eslint: "),w={href:"https://eslint.org/docs/rules/no-var.html",target:"_blank",rel:"noopener noreferrer"},j=(0,p.Uk)("no-var"),_=(0,p.uE)('<blockquote><p>原因：<code>let</code> 是块级作用域的，而不像 <code>var</code> 属于函数级作用域</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  count <span class="token operator">+=</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  count <span class="token operator">+=</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h3>',3),x=(0,p.Uk)("请使用字面量值创建对象，eslint: "),U={href:"https://eslint.org/docs/rules/no-new-object.html",target:"_blank",rel:"noopener noreferrer"},q=(0,p.Uk)("no-new-object"),E=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),W=(0,p.uE)('<li><p>别使用保留字作为对象的键值，这样在 IE8 下不会运行</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// default 是保留字</span>\n  common<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  defaults<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  common<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p>当使用动态属性名创建对象时，请使用对象计算属性名来进行创建</p></li>',2),N=(0,p.uE)('<blockquote><p>原因：因为这样做就可以让你在一个地方定义所有的对象属性</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">a key named </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>k<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;San Francisco&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">[</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token string">&#39;enabled&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;San Francisco&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token string">&#39;enabled&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',2),A=(0,p.Uk)("请使用对象方法的简写方式，eslint: "),O={href:"https://eslint.org/docs/rules/object-shorthand.html",target:"_blank",rel:"noopener noreferrer"},S=(0,p.Uk)("object-shorthand"),P=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n\n  <span class="token function-variable function">addValue</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> item<span class="token punctuation">.</span>value <span class="token operator">+</span> val\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n\n  <span class="token function">addValue</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> item<span class="token punctuation">.</span>value <span class="token operator">+</span> val\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',1),F=(0,p.Uk)("请使用对象属性值的简写方式，eslint: "),D={href:"https://eslint.org/docs/rules/object-shorthand.html",target:"_blank",rel:"noopener noreferrer"},R=(0,p.Uk)("object-shorthand"),B=(0,p.uE)('<blockquote><p>原因：这样更简短且描述更清楚</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> job <span class="token operator">=</span> <span class="token string">&#39;FrontEnd&#39;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token punctuation">{</span>\n  job<span class="token operator">:</span> job\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token punctuation">{</span>\n  job\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>将简写的对象属性分组后统一放到对象声明的开头</li></ul><blockquote><p>原因：这样更容易区分哪些属性用了简写的方式</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> job <span class="token operator">=</span> <span class="token string">&#39;FrontEnd&#39;</span>\n<span class="token keyword">const</span> department <span class="token operator">=</span> <span class="token string">&#39;JDC&#39;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token punctuation">{</span>\n  sex<span class="token operator">:</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">,</span>\n  job<span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>\n  department\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token punctuation">{</span>\n  job<span class="token punctuation">,</span>\n  department<span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">25</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>',5),J=(0,p.Uk)("只对非法标识符的属性使用引号，eslint: "),T={href:"https://eslint.org/docs/rules/quote-props.html",target:"_blank",rel:"noopener noreferrer"},C=(0,p.Uk)("quote-props"),I=(0,p.uE)('<blockquote><p>原因：因为通常来说我们认为这样主观上会更容易阅读，这样会带来代码高亮上的提升，同时也更容易被主流 JS 引擎优化</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> bad <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;foo&#39;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;bar&#39;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;data-blah&#39;</span><span class="token operator">:</span> <span class="token number">5</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> good <span class="token operator">=</span> <span class="token punctuation">{</span>\n  foo<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  bar<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;data-blah&#39;</span><span class="token operator">:</span> <span class="token number">5</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',2),$=(0,p.Uk)("不要直接使用 "),Q=(0,p._)("code",null,"Object.prototype",-1),z=(0,p.Uk)(" 的方法, 例如 "),L=(0,p._)("code",null,"hasOwnProperty",-1),M=(0,p.Uk)(", "),H=(0,p._)("code",null,"propertyIsEnumerable",-1),V=(0,p.Uk)(" 和 "),Z=(0,p._)("code",null,"isPrototypeOf",-1),K=(0,p.Uk)(" 方法，eslint: "),X={href:"https://eslint.org/docs/rules/no-prototype-builtins",target:"_blank",rel:"noopener noreferrer"},Y=(0,p.Uk)("no-prototype-builtins"),G=(0,p.uE)('<blockquote><p>原因：这些方法可能会被对象自身的同名属性覆盖 - 比如 <code>{ hasOwnProperty: false }</code> 或者对象可能是一个 <code>null</code> 对象(<code>Object.create(null)</code>)</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token comment">// bad</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// best</span>\n<span class="token keyword">const</span> has <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty <span class="token comment">// cache the lookup once, in module scope.</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">has</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">/* or */</span>\n<span class="token keyword">import</span> has <span class="token keyword">from</span> <span class="token string">&#39;has&#39;</span> <span class="token comment">// https://www.npmjs.com/package/has</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">has</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li>优先使用对象展开运算符 <code>...</code> 来做对象浅拷贝而不是使用 <code>Object.assign</code>，使用对象剩余操作符来获得一个包含确定的剩余属性的新对象</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// very bad</span>\n<span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>\n<span class="token keyword">const</span> copy <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> <span class="token punctuation">{</span> c<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// this mutates `original` ಠ_ಠ</span>\n<span class="token keyword">delete</span> copy<span class="token punctuation">.</span>a <span class="token comment">// so does this</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>\n<span class="token keyword">const</span> copy <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> original<span class="token punctuation">,</span> <span class="token punctuation">{</span> c<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// copy =&gt; { a: 1, b: 2, c: 3 }</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>\n<span class="token keyword">const</span> copy <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>original<span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span> <span class="token comment">// copy =&gt; { a: 1, b: 2, c: 3 }</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> <span class="token operator">...</span>noA <span class="token punctuation">}</span> <span class="token operator">=</span> copy <span class="token comment">// noA =&gt; { b: 2, c: 3 }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3>',5),nn=(0,p.Uk)("请使用字面量值创建数组，eslint: "),sn={href:"https://eslint.org/docs/rules/no-array-constructor.html",target:"_blank",rel:"noopener noreferrer"},an=(0,p.Uk)("no-array-constructor"),pn=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),en=(0,p.uE)('<li><p>向数组中添加元素时，请使用 <code>push</code> 方法</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n<span class="token comment">// bad</span>\nitems<span class="token punctuation">[</span>items<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span>\n\n<span class="token comment">// good</span>\nitems<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>使用展开运算符 <code>...</code> 复制数组</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> itemsCopy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> len <span class="token operator">=</span> items<span class="token punctuation">.</span>length\n<span class="token keyword">let</span> i\n\n<span class="token comment">// bad</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  itemsCopy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\nitemsCopy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>items<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>把一个可迭代的对象转换为数组时，使用展开运算符 <code>...</code> 而不是 <code>Array.from</code></p></li>',3),tn=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.foo&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> nodes <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>\n\n<span class="token comment">// best</span>\n<span class="token keyword">const</span> nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>foo<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>使用 <code>Array.from</code> 来将一个类数组对象转换为数组</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arrLike <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">,</span> length<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>遍历迭代器进行映射时使用 <code>Array.from</code> 代替扩展运算符 <code>...</code>, 因为这可以避免创建中间数组</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>foo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> baz <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><p>使用数组的 <code>map</code> 等方法时，请使用 <code>return</code> 声明，如果是单一声明语句的情况，可省略 <code>return</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> y\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> flat <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">memo<span class="token punctuation">,</span> item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> flatten <span class="token operator">=</span> memo<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n  flat<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> flatten\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> flat <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">memo<span class="token punctuation">,</span> item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> flatten <span class="token operator">=</span> memo<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n  flat<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> flatten\n  <span class="token keyword">return</span> flatten\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// bad</span>\ninbox<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> subject<span class="token punctuation">,</span> author <span class="token punctuation">}</span> <span class="token operator">=</span> msg\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>subject <span class="token operator">===</span> <span class="token string">&#39;Mockingbird&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> author <span class="token operator">===</span> <span class="token string">&#39;Harper Lee&#39;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\ninbox<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> subject<span class="token punctuation">,</span> author <span class="token punctuation">}</span> <span class="token operator">=</span> msg\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>subject <span class="token operator">===</span> <span class="token string">&#39;Mockingbird&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> author <span class="token operator">===</span> <span class="token string">&#39;Harper Lee&#39;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div></li><li><p>如果一个数组有多行则要在数组的开括号后和闭括号前使用新行</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>\n<span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> objectInArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token number">1</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token number">2</span>\n<span class="token punctuation">}</span><span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> numberInArray <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>\n<span class="token punctuation">]</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> objectInArray <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    id<span class="token operator">:</span> <span class="token number">1</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    id<span class="token operator">:</span> <span class="token number">2</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> numberInArray <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token number">2</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="解构赋值" tabindex="-1"><a class="header-anchor" href="#解构赋值" aria-hidden="true">#</a> 解构赋值</h3>',8),on=(0,p.Uk)("当需要使用对象的多个属性时，请使用解构赋值，eslint: "),cn={href:"https://eslint.org/docs/rules/prefer-destructuring",target:"_blank",rel:"noopener noreferrer"},ln=(0,p.Uk)("prefer-destructuring"),rn=(0,p.uE)('<blockquote><p>愿意：解构可以避免创建属性的临时引用</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">getFullName</span> <span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> firstName <span class="token operator">=</span> user<span class="token punctuation">.</span>firstName\n  <span class="token keyword">const</span> lastName <span class="token operator">=</span> user<span class="token punctuation">.</span>lastName\n\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">getFullName</span> <span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> firstName<span class="token punctuation">,</span> lastName <span class="token punctuation">}</span> <span class="token operator">=</span> user\n\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// better</span>\n<span class="token keyword">function</span> <span class="token function">getFullName</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> firstName<span class="token punctuation">,</span> lastName <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>',2),un=(0,p.Uk)("当需要使用数组的多个值时，请同样使用解构赋值，eslint: "),kn={href:"https://eslint.org/docs/rules/prefer-destructuring",target:"_blank",rel:"noopener noreferrer"},bn=(0,p.Uk)("prefer-destructuring"),mn=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> first <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> second <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">]</span> <span class="token operator">=</span> arr\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',1),dn=(0,p._)("li",null,[(0,p._)("p",null,"函数需要回传多个值时，请使用对象的解构，而不是数组的解构")],-1),gn=(0,p.uE)('<blockquote><p>原因：可以非破坏性地随时增加或者改变属性顺序</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">doSomething</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> left<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 如果是数组解构，那么在调用时就需要考虑数据的顺序</span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span>top<span class="token punctuation">,</span> xx<span class="token punctuation">,</span> xxx<span class="token punctuation">,</span> left<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">doSomething</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> left <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 此时不需要考虑数据的顺序</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> top<span class="token punctuation">,</span> left <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3>',3),fn=(0,p.Uk)("字符串统一使用单引号的形式 "),vn=(0,p._)("code",null,"''",-1),yn=(0,p.Uk)("，eslint: "),hn={href:"https://eslint.org/docs/rules/quotes.html",target:"_blank",rel:"noopener noreferrer"},wn=(0,p.Uk)("quotes"),jn=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> department <span class="token operator">=</span> <span class="token string">&quot;JDC&quot;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> department <span class="token operator">=</span> <span class="token string">&#39;JDC&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),_n=(0,p.uE)('<li><p>字符串太长的时候，请不要使用字符串连接符换行 <code>\\</code>，而是使用 <code>+</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;凹凸实验室 凹凸实验室 凹凸实验室&#39;</span> <span class="token operator">+</span>\n  <span class="token string">&#39;凹凸实验室 凹凸实验室 凹凸实验室&#39;</span> <span class="token operator">+</span>\n  <span class="token string">&#39;凹凸实验室 凹凸实验室&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li>',1),xn=(0,p.Uk)("程序化生成字符串时，请使用模板字符串，eslint: "),Un={href:"http://eslint.org/docs/rules/prefer-template.html",target:"_blank",rel:"noopener noreferrer"},qn=(0,p.Uk)("prefer-template"),En=(0,p.Uk)(),Wn={href:"https://eslint.org/docs/rules/template-curly-spacing",target:"_blank",rel:"noopener noreferrer"},Nn=(0,p.Uk)("template-curly-spacing"),An=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> test<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">+</span> test\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ab</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>test<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',1),On=(0,p.Uk)("不要对字符串使用eval()，会导致太多漏洞， eslint: "),Sn={href:"https://eslint.org/docs/rules/no-eval",target:"_blank",rel:"noopener noreferrer"},Pn=(0,p.Uk)("no-eval"),Fn=(0,p.Uk)("不要在字符串中使用不必要的转义字符， eslint: "),Dn={href:"https://eslint.org/docs/rules/no-useless-escape",target:"_blank",rel:"noopener noreferrer"},Rn=(0,p.Uk)("no-useless-escape"),Bn=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;\\&#39;this\\&#39; \\i\\s \\&quot;quoted\\&quot;&#39;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;\\&#39;this\\&#39; is &quot;quoted&quot;&#39;</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">my name is &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;</span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h3>',2),Jn=(0,p.Uk)("不要使用Function构造函数创建函数， eslint: "),Tn={href:"https://eslint.org/docs/rules/no-new-func",target:"_blank",rel:"noopener noreferrer"},Cn=(0,p.Uk)("no-new-func"),In=(0,p.uE)('<blockquote><p>原因：此方式创建函数和对字符串使用 <code>eval()</code> 一样会产生漏洞</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;return a + b&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// still bad</span>\n<span class="token keyword">const</span> subtract <span class="token operator">=</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;return a - b&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',2),$n=(0,p.Uk)("在函数签名中使用空格，eslint: "),Qn={href:"https://eslint.org/docs/rules/space-before-function-paren",target:"_blank",rel:"noopener noreferrer"},zn=(0,p.Uk)("space-before-function-paren"),Ln=(0,p.Uk)(),Mn={href:"https://eslint.org/docs/rules/space-before-blocks",target:"_blank",rel:"noopener noreferrer"},Hn=(0,p.Uk)("space-before-blocks"),Vn=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">g</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">h</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> <span class="token function-variable function">x</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">b</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">y</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">a</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',1),Zn=(0,p.Uk)("使用具名函数表达式而非函数声明，eslint: "),Kn={href:"http://eslint.org/docs/rules/func-style",target:"_blank",rel:"noopener noreferrer"},Xn=(0,p.Uk)("func-style"),Yn=(0,p.uE)('<blockquote><p>原因：这样做会导致函数声明被提升，这意味着很容易在文件中定义此函数之前引用它，不利于可读性和可维护性。如果你发现函数定义既庞大又复杂以至于不能理解文件的其他部分，或许你应该将它拆分成模块！别忘记要显式命名表达式，而不用管名字是否是从包含的变量（通常出现在现代浏览器中或者使用 Babel 编译器的时候）中推断的。这样会消除错误调用堆栈中的任何假设。 (讨论)</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token comment">// lexical name distinguished from the variable-referenced invocation(s)</span>\n<span class="token keyword">const</span> <span class="token function-variable function">short</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">longUniqueMoreDescriptiveLexicalFoo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',2),Gn=(0,p.Uk)("用圆括号包裹自执行匿名函数，eslint："),ns={href:"http://eslint.org/docs/rules/wrap-iife.html",target:"_blank",rel:"noopener noreferrer"},ss=(0,p.Uk)("wrap-iife"),as=(0,p.uE)('<blockquote><p>原因：一个立即执行匿名函数表达式是一个单一的单元，将其及其调用括号包装在括号中，能够清楚地表达这一点。注意，在到处都是模块的世界中几乎不需要 IIFE。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// immediately-invoked function expression (IIFE)</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome to the Internet. Please follow me.&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',2),ps=(0,p.Uk)("不要在非函数代码块（"),es=(0,p._)("code",null,"if",-1),ts=(0,p.Uk)(" , "),os=(0,p._)("code",null,"while",-1),cs=(0,p.Uk)(" 等）中声明函数，eslint："),ls={href:"http://eslint.org/docs/rules/no-loop-func.html",target:"_blank",rel:"noopener noreferrer"},rs=(0,p.Uk)("no-loop-func"),us=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>isUse<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">test</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// do something</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">let</span> test\n<span class="token keyword">if</span> <span class="token punctuation">(</span>isUse<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// do something</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',1),is=(0,p._)("li",null,[(0,p._)("p",null,[(0,p.Uk)("不要将参数命名为 "),(0,p._)("code",null,"arguments"),(0,p.Uk)("，会导致该参数的优先级高于每个函数作用域内原先存在的 "),(0,p._)("code",null,"arguments"),(0,p.Uk)(" 对象")])],-1),ks=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> options<span class="token punctuation">,</span> arguments</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> options<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li><p>不要使用 <code>arguments</code>，使用 剩余运算符 <code>...</code></p><blockquote><p><code>arguments</code> 只是一个类数组，而 <code>...</code> 是一个真正的数组</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">test</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">test</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>使用参数默认值语法而不是修改函数参数</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// really bad</span>\n<span class="token keyword">function</span> <span class="token function">handleThings</span> <span class="token punctuation">(</span><span class="token parameter">opts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// No! We shouldn&#39;t mutate function arguments.</span>\n  <span class="token comment">// Double bad: if opts is falsy it&#39;ll be set to an object which may</span>\n  <span class="token comment">// be what you want but it can introduce subtle bugs.</span>\n  opts <span class="token operator">=</span> opts <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// still bad</span>\n<span class="token keyword">function</span> <span class="token function">handleThings</span> <span class="token punctuation">(</span><span class="token parameter">opts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    opts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">handleThings</span> <span class="token punctuation">(</span><span class="token parameter">opts <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ul><li>避免参数默认值的副作用</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">count</span> <span class="token punctuation">(</span><span class="token parameter">a <span class="token operator">=</span> b<span class="token operator">++</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span>\n<span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 2</span>\n<span class="token function">count</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>\n<span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>将参数默认值放在最后</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">handleThings</span> <span class="token punctuation">(</span><span class="token parameter">opts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">handleThings</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',7),bs=(0,p.Uk)("不要更改参数，eslint: "),ms={href:"https://eslint.org/docs/rules/no-param-reassign.html",target:"_blank",rel:"noopener noreferrer"},ds=(0,p.Uk)("no-param-reassign"),gs=(0,p.uE)('<blockquote><p>原因：操作作为参数传入的对象可能在原始调用中造成意想不到的变量副作用</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">f1</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  obj<span class="token punctuation">.</span>key <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">f2</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> obj<span class="token punctuation">.</span>key <span class="token operator">:</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',2),fs=(0,p.Uk)("不要给参数重新赋值，eslint: "),vs={href:"https://eslint.org/docs/rules/no-param-reassign.html",target:"_blank",rel:"noopener noreferrer"},ys=(0,p.Uk)("no-param-reassign"),hs=(0,p.uE)('<blockquote><p>原因：参数重新赋值可能会导致无法预期的行为，尤其是当操作 <code>arguments</code> 对象时，也可能导致优化问题，尤其是在 V8 引擎中</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">f1</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  a <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">f2</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">f3</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> b <span class="token operator">=</span> a <span class="token operator">||</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">f4</span> <span class="token punctuation">(</span><span class="token parameter">a <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>',2),ws=(0,p.Uk)("调用可变参数函数时建议使用展开运算符 "),js=(0,p._)("code",null,"....",-1),_s=(0,p.Uk)("， eslint: "),xs={href:"http://eslint.org/docs/rules/prefer-spread",target:"_blank",rel:"noopener noreferrer"},Us=(0,p.Uk)("prefer-spread"),qs=(0,p.uE)('<blockquote><p>原因：显然你无需使用上下文，很难结合 <code>new</code> 和 <code>apply</code></p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>console<span class="token punctuation">,</span> x<span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>x<span class="token punctuation">)</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Date<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">2016</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a> 箭头函数</h3>',3),Es=(0,p.Uk)("当你必须使用函数表达式（传递匿名函数）时，使用箭头函数标记. eslint: "),Ws={href:"http://eslint.org/docs/rules/prefer-arrow-callback.html",target:"_blank",rel:"noopener noreferrer"},Ns=(0,p.Uk)("prefer-arrow-callback"),As=(0,p.Uk)(", "),Os={href:"https://eslint.org/docs/rules/arrow-spacing.html",target:"_blank",rel:"noopener noreferrer"},Ss=(0,p.Uk)("arrow-spacing"),Ps=(0,p.uE)('<blockquote><p>原因：它将创建在 <code>this</code> 上下文中执行的函数版本，通常是您想要的，并且语法更简洁</p></blockquote><blockquote><p>如果您有一个相当复杂的函数，则可以将该逻辑移到其自己的命名函数表达式中</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> y\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> y\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',3),Fs=(0,p.Uk)("如果函数体只包含一条没有副作用的返回表达式的语句，可以省略花括号并使用隐式的 "),Ds=(0,p._)("code",null,"return",-1),Rs=(0,p.Uk)("， 否则保留花括号并使用 "),Bs=(0,p._)("code",null,"return",-1),Js=(0,p.Uk)(" 语句，eslint: "),Ts={href:"https://eslint.org/docs/rules/arrow-parens.html",target:"_blank",rel:"noopener noreferrer"},Cs=(0,p.Uk)("arrow-parens"),Is=(0,p.Uk)(", "),$s={href:"https://eslint.org/docs/rules/arrow-body-style.html",target:"_blank",rel:"noopener noreferrer"},Qs=(0,p.Uk)("arrow-body-style"),zs=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> nextNumber <span class="token operator">=</span> number <span class="token operator">+</span> <span class="token number">1</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">A string containing the </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>nextNumber<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">number</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">A string containing the </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>number<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> nextNumber <span class="token operator">=</span> number <span class="token operator">+</span> <span class="token number">1</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">A string containing the </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>nextNumber<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">number<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  index<span class="token operator">:</span> number\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// No implicit return with side effects</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Do something if callback returns true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> bool <span class="token operator">=</span> <span class="token boolean">false</span>\n\n<span class="token comment">// bad</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> bool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  bool <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><ul><li>一旦表达式跨多行，使用圆括号包裹以便更好阅读</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token punctuation">[</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;put&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">httpMethod</span> <span class="token operator">=&gt;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>\n    httpMagicObjectWithAVeryLongName<span class="token punctuation">,</span>\n    httpMethod\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;put&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">httpMethod</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>\n    httpMagicObjectWithAVeryLongName<span class="token punctuation">,</span>\n    httpMethod\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',3),Ls=(0,p.Uk)("函数如果只接收一个参数并且没使用用花括号，则省略圆括号，否则为了清晰明确则使用圆括号包裹参数，注意：总是使用圆括号也是可以接受的，eslint 中的 "),Ms={href:"https://eslint.org/docs/rules/arrow-parens#always",target:"_blank",rel:"noopener noreferrer"},Hs=(0,p.Uk)('"always" 选项'),Vs=(0,p.Uk)("，eslint: "),Zs={href:"http://eslint.org/docs/rules/arrow-parens.html",target:"_blank",rel:"noopener noreferrer"},Ks=(0,p.Uk)("arrow-parens"),Xs=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">A long string with the </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>number<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. It’s so long that we’ve broken it </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n  <span class="token string">&#39;over multiple lines!&#39;</span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// bad</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> y\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> y\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="类-构造函数" tabindex="-1"><a class="header-anchor" href="#类-构造函数" aria-hidden="true">#</a> 类&amp;构造函数</h3><ul><li><p>使用 <code>class</code>，避免直接操作 <code>prototype</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">Queue</span> <span class="token punctuation">(</span><span class="token parameter">contents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>_queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span>contents<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pop</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>_queue<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> value\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">contents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>contents<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">pop</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_queue<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> value\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></li><li><p>使用 <code>extends</code> 来实现继承</p></li></ul><blockquote><p>原因：这是一个不会破坏 <code>instanceof</code> 的内建实现原型式继承的方式</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> inherits <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;inherits&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">function</span> <span class="token function">PeekableQueue</span><span class="token punctuation">(</span><span class="token parameter">contents</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">Queue</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> contents<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">inherits</span><span class="token punctuation">(</span>PeekableQueue<span class="token punctuation">,</span> Queue<span class="token punctuation">)</span>\n<span class="token class-name">PeekableQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">peek</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">PeekableQueue</span> <span class="token keyword">extends</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>\n  <span class="token function">peek</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>',5),Ys=(0,p.Uk)("如果未声明构造函数，则类会有一个默认的构造函数，没必要用空的构造函数或者将其委托给父类，eslint: "),Gs={href:"http://eslint.org/docs/rules/no-useless-constructor",target:"_blank",rel:"noopener noreferrer"},na=(0,p.Uk)("no-useless-constructor"),sa=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">class</span> <span class="token class-name">Jedi</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">class</span> <span class="token class-name">Rey</span> <span class="token keyword">extends</span> <span class="token class-name">Jedi</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">Rey</span> <span class="token keyword">extends</span> <span class="token class-name">Jedi</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Rey&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>',1),aa=(0,p.Uk)("避免类成员重复，eslint: "),pa={href:"https://eslint.org/docs/rules/no-dupe-class-members",target:"_blank",rel:"noopener noreferrer"},ea=(0,p.Uk)("no-dupe-class-members"),ta=(0,p.uE)('<blockquote><p>原因：重复的类成员声明会默认使用最后声明的，通常会导致 bug</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  <span class="token function">bar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token punctuation">}</span>\n  <span class="token function">bar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">2</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  <span class="token function">bar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  <span class="token function">bar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">2</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="模块" tabindex="-1"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h3><ul><li>使用标准的 ES6 模块语法 <code>import</code> 和 <code>export</code></li></ul><blockquote><p>原因：模块是未来，让我们现在开始使用未来的特性</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./util&#39;</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> util\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> Util <span class="token keyword">from</span> <span class="token string">&#39;./util&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> Util\n\n<span class="token comment">// better</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Util <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./util&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> Util\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',6),oa=(0,p.uE)('<li><p>不要使用 <code>import</code> 的通配符 <code>*</code>，这样可以确保你只有一个默认的 export</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Util <span class="token keyword">from</span> <span class="token string">&#39;./util&#39;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> Util <span class="token keyword">from</span> <span class="token string">&#39;./util&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li>',1),ca=(0,p.Uk)("同个文件每个模块只允许 "),la=(0,p._)("code",null,"import",-1),ra=(0,p.Uk)(" 一次，有多个 "),ua=(0,p._)("code",null,"import",-1),ia=(0,p.Uk)(" 请书写在一起，eslint: "),ka={href:"https://eslint.org/docs/rules/no-duplicate-imports",target:"_blank",rel:"noopener noreferrer"},ba=(0,p.Uk)("no-duplicate-imports"),ma=(0,p.uE)('<blockquote><p>原因：这样可以让代码更易于维护</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span>\n<span class="token comment">// … some other imports … //</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> named1<span class="token punctuation">,</span> named2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> foo<span class="token punctuation">,</span> <span class="token punctuation">{</span> named1<span class="token punctuation">,</span> named2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> foo<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  named1<span class="token punctuation">,</span>\n  named2\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',2),da=(0,p.Uk)("将所有 "),ga=(0,p._)("code",null,"import",-1),fa=(0,p.Uk)(" 语句放在文件最前方，eslint: "),va={href:"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/first.md",target:"_blank",rel:"noopener noreferrer"},ya=(0,p.Uk)("import/imports-first"),ha=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span>\nfoo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">import</span> bar <span class="token keyword">from</span> <span class="token string">&#39;bar&#39;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span>\n<span class="token keyword">import</span> bar <span class="token keyword">from</span> <span class="token string">&#39;bar&#39;</span>\n\nfoo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>多行导入应该像多行数组和对象文字一样缩进</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> longNameA<span class="token punctuation">,</span> longNameB<span class="token punctuation">,</span> longNameC<span class="token punctuation">,</span> longNameD<span class="token punctuation">,</span> longNameE <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  longNameA<span class="token punctuation">,</span>\n  longNameB<span class="token punctuation">,</span>\n  longNameC<span class="token punctuation">,</span>\n  longNameD<span class="token punctuation">,</span>\n  longNameE\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',3),wa=(0,p.Uk)("在模块 "),ja=(0,p._)("code",null,"import",-1),_a=(0,p.Uk)(" 声明中禁止使用 "),xa=(0,p._)("code",null,"Webpack",-1),Ua=(0,p.Uk)(" 的 "),qa=(0,p._)("code",null,"loader",-1),Ea=(0,p.Uk)(" 语法，eslint: "),Wa={href:"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-webpack-loader-syntax.md",target:"_blank",rel:"noopener noreferrer"},Na=(0,p.Uk)("import/no-webpack-loader-syntax"),Aa=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> fooSass <span class="token keyword">from</span> <span class="token string">&#39;css!sass!foo.scss&#39;</span>\n<span class="token keyword">import</span> barCss <span class="token keyword">from</span> <span class="token string">&#39;style!css!bar.css&#39;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> fooSass <span class="token keyword">from</span> <span class="token string">&#39;foo.scss&#39;</span>\n<span class="token keyword">import</span> barCss <span class="token keyword">from</span> <span class="token string">&#39;bar.css&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器" aria-hidden="true">#</a> 迭代器</h3>',2),Oa=(0,p.Uk)("不要使用 "),Sa=(0,p._)("code",null,"iterators",-1),Pa=(0,p.Uk)("，建议使用 JS 更高优先级的函数代替 for-in 或 for-of 循环，除非迫不得已，eslint: "),Fa={href:"https://eslint.org/docs/rules/no-iterator.html",target:"_blank",rel:"noopener noreferrer"},Da=(0,p.Uk)("no-iterator"),Ra=(0,p.Uk)(),Ba={href:"https://eslint.org/docs/rules/no-restricted-syntax",target:"_blank",rel:"noopener noreferrer"},Ja=(0,p.Uk)("no-restricted-syntax"),Ta=(0,p.uE)('<blockquote></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  sum <span class="token operator">+=</span> num\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>\nnumbers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> sum <span class="token operator">+=</span> num<span class="token punctuation">)</span>\n\n<span class="token comment">// better</span>\n<span class="token keyword">const</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> total <span class="token operator">+</span> num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="生成器" tabindex="-1"><a class="header-anchor" href="#生成器" aria-hidden="true">#</a> 生成器</h3><ul><li>现阶段请不要使用生成器 <code>generator</code></li></ul><blockquote><p>原因：因为不能很好地翻译成 ES5 代码</p></blockquote><h3 id="对象属性" tabindex="-1"><a class="header-anchor" href="#对象属性" aria-hidden="true">#</a> 对象属性</h3><ul><li><p>使用 <code>.</code> 来访问对象属性</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> joke <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;haha&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">28</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> joke<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> joke<span class="token punctuation">.</span>name\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>当访问的属性是变量时使用 <code>[]</code></p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> luke <span class="token operator">=</span> <span class="token punctuation">{</span>\n  jedi<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">getProp</span> <span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> luke<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> isJedi <span class="token operator">=</span> <span class="token function">getProp</span><span class="token punctuation">(</span><span class="token string">&#39;jedi&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="变量声明" tabindex="-1"><a class="header-anchor" href="#变量声明" aria-hidden="true">#</a> 变量声明</h3>',9),Ca=(0,p.Uk)("声明变量时，请使用 "),Ia=(0,p._)("code",null,"const",-1),$a=(0,p.Uk)("、"),Qa=(0,p._)("code",null,"let",-1),za=(0,p.Uk)(" 关键字，如果没有写关键字，变量就会暴露在全局上下文中，这样很可能会和现有变量冲突，另外，也很难明确该变量的作用域是什么。这里推荐使用 "),La=(0,p._)("code",null,"const",-1),Ma=(0,p.Uk)(" 来声明变量，我们需要避免全局命名空间的污染。eslint: "),Ha={href:"http://eslint.org/docs/rules/no-undef",target:"_blank",rel:"noopener noreferrer"},Va=(0,p.Uk)("no-undef"),Za=(0,p.Uk)(),Ka={href:"http://eslint.org/docs/rules/prefer-const",target:"_blank",rel:"noopener noreferrer"},Xa=(0,p.Uk)("prefer-const"),Ya=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\ndemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),Ga=(0,p.uE)('<li><p>将所有的 <code>const</code> 和 <code>let</code> 分组</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">let</span> a\n<span class="token keyword">const</span> b\n<span class="token keyword">let</span> c\n<span class="token keyword">const</span> d\n<span class="token keyword">let</span> e\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> b\n<span class="token keyword">const</span> d\n<span class="token keyword">let</span> a\n<span class="token keyword">let</span> c\n<span class="token keyword">let</span> e\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>变量不要进行链式赋值</p></li>',2),np=(0,p.uE)('<blockquote><p>原因：变量链式赋值会创建隐藏的全局变量</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// JavaScript interprets this as</span>\n  <span class="token comment">// let a = ( b = ( c = 1 ) );</span>\n  <span class="token comment">// The let keyword only applies to variable a; variables b and c become</span>\n  <span class="token comment">// global variables.</span>\n  <span class="token keyword">let</span> a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// throws ReferenceError</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">// 1</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword">let</span> b <span class="token operator">=</span> a\n  <span class="token keyword">let</span> c <span class="token operator">=</span> a\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// throws ReferenceError</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// throws ReferenceError</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">// throws ReferenceError</span>\n\n<span class="token comment">// the same applies for `const`</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div>',2),sp=(0,p.Uk)("不允许出现未被使用的变量，eslint: "),ap={href:"https://eslint.org/docs/rules/no-unused-vars",target:"_blank",rel:"noopener noreferrer"},pp=(0,p.Uk)("no-unused-vars"),ep=(0,p.uE)('<blockquote><p>原因：声明但未被使用的变量通常是不完全重构犯下的错误.这种变量在代码里浪费空间并会给读者造成困扰</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n\n<span class="token keyword">var</span> some_unused_var <span class="token operator">=</span> <span class="token number">42</span>\n\n<span class="token comment">// Write-only variables are not considered as used.</span>\n<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">10</span>\ny <span class="token operator">=</span> <span class="token number">5</span>\n\n<span class="token comment">// A read for a modification of itself is not considered as used.</span>\n<span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token number">0</span>\nz <span class="token operator">=</span> z <span class="token operator">+</span> <span class="token number">1</span>\n\n<span class="token comment">// Unused function arguments.</span>\n<span class="token keyword">function</span> <span class="token function">getX</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n\n<span class="token keyword">function</span> <span class="token function">getXPlusY</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token keyword">const</span> y <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">2</span>\n\n<span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getXPlusY</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// &#39;type&#39; is ignored even if unused because it has a rest property sibling.</span>\n<span class="token comment">// This is a form of extracting an object that omits the specified keys.</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> <span class="token operator">...</span>coords <span class="token punctuation">}</span> <span class="token operator">=</span> data\n<span class="token comment">// &#39;coords&#39; is now the &#39;data&#39; object without its &#39;type&#39; property.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="hoisting" tabindex="-1"><a class="header-anchor" href="#hoisting" aria-hidden="true">#</a> Hoisting</h3>',3),tp=(0,p._)("code",null,"var",-1),op=(0,p.Uk)(" 存在变量提升的情况，即 "),cp=(0,p._)("code",null,"var",-1),lp=(0,p.Uk)(" 声明会被提升至该作用域的顶部，但是他们的赋值并不会。而 "),rp=(0,p._)("code",null,"const",-1),up=(0,p.Uk)(" 和 "),ip=(0,p._)("code",null,"let",-1),kp=(0,p.Uk)(" 并不存在这种情况，他们被赋予了 "),bp={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let",target:"_blank",rel:"noopener noreferrer"},mp=(0,p.Uk)("Temporal Dead Zones, TDZ"),dp=(0,p.Uk)("， 了解 "),gp={href:"http://es-discourse.com/t/why-typeof-is-no-longer-safe/15",target:"_blank",rel:"noopener noreferrer"},fp=(0,p.Uk)("typeof 不再安全"),vp=(0,p.Uk)("很重要"),yp=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">example</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>notDefined<span class="token punctuation">)</span>   <span class="token comment">// =&gt; throws a ReferenceError</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">example</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>declareButNotAssigned<span class="token punctuation">)</span>  <span class="token comment">// =&gt; undefined</span>\n  <span class="token keyword">var</span> declaredButNotAssigned <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">example</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> declaredButNotAssigned\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>declaredButNotAssigned<span class="token punctuation">)</span>   <span class="token comment">// =&gt; undefined</span>\n  declaredButNotAssigned <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">example</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>declaredButNotAssigned<span class="token punctuation">)</span>   <span class="token comment">// =&gt; throws a ReferenceError</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> declaredButNotAssigned<span class="token punctuation">)</span>  <span class="token comment">// =&gt; throws a ReferenceError</span>\n  <span class="token keyword">const</span> declaredButNotAssigned <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>',1),hp=(0,p.uE)('<li><p>匿名函数的变量名会提升，但函数内容不会</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">example</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anonymous<span class="token punctuation">)</span>  <span class="token comment">// =&gt; undefined</span>\n\n  <span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">var</span> <span class="token function-variable function">anonymous</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li><p>命名的函数表达式的变量名会被提升，但函数名和函数函数内容并不会</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>named<span class="token punctuation">)</span>  <span class="token comment">// =&gt; undefined</span>\n\n  <span class="token function">named</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// =&gt; TypeError named is not a function</span>\n\n  <span class="token function">superPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// =&gt; ReferenceError superPower is not defined</span>\n\n  <span class="token keyword">var</span> <span class="token function-variable function">named</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">superPower</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Flying&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>named<span class="token punctuation">)</span>  <span class="token comment">// =&gt; undefined</span>\n\n  <span class="token function">named</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// =&gt; TypeError named is not a function</span>\n\n  <span class="token keyword">var</span> <span class="token function-variable function">named</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">named</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;named&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></li>',2),wp=(0,p._)("h3",{id:"比较运算符-相等",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#比较运算符-相等","aria-hidden":"true"},"#"),(0,p.Uk)(" 比较运算符&相等")],-1),jp=(0,p.Uk)("使用 "),_p=(0,p._)("code",null,"===",-1),xp=(0,p.Uk)(" 和 "),Up=(0,p._)("code",null,"!==",-1),qp=(0,p.Uk)(" 而非 "),Ep=(0,p._)("code",null,"==",-1),Wp=(0,p.Uk)(" 和 "),Np=(0,p._)("code",null,"!=",-1),Ap=(0,p.Uk)("，eslint: "),Op={href:"https://eslint.org/docs/rules/eqeqeq.html",target:"_blank",rel:"noopener noreferrer"},Sp=(0,p.Uk)("eqeqeq"),Pp=(0,p.uE)('<li><p>条件声明例如 <code>if</code> 会用 <code>ToBoolean</code> 这个抽象方法将表达式转成布尔值并遵循如下规则</p><ul><li><code>Objects</code> 等于 <code>true</code></li><li><code>Undefined</code> 等于 <code>false</code></li><li><code>Null</code> 等于 <code>false</code></li><li><code>Booleans</code> 等于 <code>布尔值</code></li><li><code>Numbers</code> 在 <code>+0</code>, <code>-0</code>, 或者 <code>NaN</code> 的情况下等于 <code>false</code>, 其他情况是 <code>true</code></li><li><code>Strings</code> 为 <code>&#39;&#39;</code> 时等于 <code>false</code>, 否则是 <code>true</code></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// true</span>\n  <span class="token comment">// 数组(即使是空数组)也是对象，对象等于true</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li>',1),Fp=(0,p.uE)('<h3 id="分号" tabindex="-1"><a class="header-anchor" href="#分号" aria-hidden="true">#</a> 分号</h3><ul><li><p>我们遵循 <code>Standard</code> 的规范，不使用分号。</p><blockquote><p>关于应不应该使用分号的讨论有很多，本规范认为非必要的时候，应该不使用分号，好的 <code>JS</code> 程序员应该清楚场景下是一定要加分号的，相信你也是名好的开发者。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token string">&#39;good&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;hahaha&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token string">&#39;good&#39;</span>\n<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;hahaha&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ul><h3 id="标准特性" tabindex="-1"><a class="header-anchor" href="#标准特性" aria-hidden="true">#</a> 标准特性</h3><p>为了代码的可移植性和兼容性，我们应该最大化的使用标准方法，例如优先使用 <code>string.charAt(3)</code> 而不是 <code>string[3]</code></p><h3 id="eval" tabindex="-1"><a class="header-anchor" href="#eval" aria-hidden="true">#</a> eval()</h3><p>由于 <code>eval</code> 方法比较 <code>evil</code>，所以我们约定禁止使用该方法</p><h3 id="with" tabindex="-1"><a class="header-anchor" href="#with" aria-hidden="true">#</a> with() {}</h3><p>由于 <code>with</code> 方法会产生神奇的作用域，所以我们也是禁止使用该方法的</p><h3 id="修改内置对象的原型" tabindex="-1"><a class="header-anchor" href="#修改内置对象的原型" aria-hidden="true">#</a> 修改内置对象的原型</h3><p>不要修改内置对象，如 <code>Object</code> 和 <code>Array</code></p>',10),Dp={},Rp=(0,a(3744).Z)(Dp,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("ul",null,[(0,p._)("li",null,[t,o,c,l,r,(0,p._)("a",u,[i,(0,p.Wm)(a)]),k,(0,p._)("a",b,[m,(0,p.Wm)(a)])])]),d,(0,p._)("ul",null,[(0,p._)("li",null,[g,f,v,y,h,(0,p._)("a",w,[j,(0,p.Wm)(a)])])]),_,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[x,(0,p._)("a",U,[q,(0,p.Wm)(a)])]),E]),W]),N,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[A,(0,p._)("a",O,[S,(0,p.Wm)(a)])]),P]),(0,p._)("li",null,[(0,p._)("p",null,[F,(0,p._)("a",D,[R,(0,p.Wm)(a)])])])]),B,(0,p._)("ul",null,[(0,p._)("li",null,[J,(0,p._)("a",T,[C,(0,p.Wm)(a)])])]),I,(0,p._)("ul",null,[(0,p._)("li",null,[$,Q,z,L,M,H,V,Z,K,(0,p._)("a",X,[Y,(0,p.Wm)(a)])])]),G,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[nn,(0,p._)("a",sn,[an,(0,p.Wm)(a)])]),pn]),en]),tn,(0,p._)("ul",null,[(0,p._)("li",null,[on,(0,p._)("a",cn,[ln,(0,p.Wm)(a)])])]),rn,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[un,(0,p._)("a",kn,[bn,(0,p.Wm)(a)])]),mn]),dn]),gn,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[fn,vn,yn,(0,p._)("a",hn,[wn,(0,p.Wm)(a)])]),jn]),_n,(0,p._)("li",null,[(0,p._)("p",null,[xn,(0,p._)("a",Un,[qn,(0,p.Wm)(a)]),En,(0,p._)("a",Wn,[Nn,(0,p.Wm)(a)])]),An]),(0,p._)("li",null,[(0,p._)("p",null,[On,(0,p._)("a",Sn,[Pn,(0,p.Wm)(a)])])]),(0,p._)("li",null,[(0,p._)("p",null,[Fn,(0,p._)("a",Dn,[Rn,(0,p.Wm)(a)])])])]),Bn,(0,p._)("ul",null,[(0,p._)("li",null,[Jn,(0,p._)("a",Tn,[Cn,(0,p.Wm)(a)])])]),In,(0,p._)("ul",null,[(0,p._)("li",null,[$n,(0,p._)("a",Qn,[zn,(0,p.Wm)(a)]),Ln,(0,p._)("a",Mn,[Hn,(0,p.Wm)(a)])])]),Vn,(0,p._)("ul",null,[(0,p._)("li",null,[Zn,(0,p._)("a",Kn,[Xn,(0,p.Wm)(a)])])]),Yn,(0,p._)("ul",null,[(0,p._)("li",null,[Gn,(0,p._)("a",ns,[ss,(0,p.Wm)(a)])])]),as,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[ps,es,ts,os,cs,(0,p._)("a",ls,[rs,(0,p.Wm)(a)])]),us]),is]),ks,(0,p._)("ul",null,[(0,p._)("li",null,[bs,(0,p._)("a",ms,[ds,(0,p.Wm)(a)])])]),gs,(0,p._)("ul",null,[(0,p._)("li",null,[fs,(0,p._)("a",vs,[ys,(0,p.Wm)(a)])])]),hs,(0,p._)("ul",null,[(0,p._)("li",null,[ws,js,_s,(0,p._)("a",xs,[Us,(0,p.Wm)(a)])])]),qs,(0,p._)("ul",null,[(0,p._)("li",null,[Es,(0,p._)("a",Ws,[Ns,(0,p.Wm)(a)]),As,(0,p._)("a",Os,[Ss,(0,p.Wm)(a)])])]),Ps,(0,p._)("ul",null,[(0,p._)("li",null,[Fs,Ds,Rs,Bs,Js,(0,p._)("a",Ts,[Cs,(0,p.Wm)(a)]),Is,(0,p._)("a",$s,[Qs,(0,p.Wm)(a)])])]),zs,(0,p._)("ul",null,[(0,p._)("li",null,[Ls,(0,p._)("a",Ms,[Hs,(0,p.Wm)(a)]),Vs,(0,p._)("a",Zs,[Ks,(0,p.Wm)(a)])])]),Xs,(0,p._)("ul",null,[(0,p._)("li",null,[Ys,(0,p._)("a",Gs,[na,(0,p.Wm)(a)])])]),sa,(0,p._)("ul",null,[(0,p._)("li",null,[aa,(0,p._)("a",pa,[ea,(0,p.Wm)(a)])])]),ta,(0,p._)("ul",null,[oa,(0,p._)("li",null,[(0,p._)("p",null,[ca,la,ra,ua,ia,(0,p._)("a",ka,[ba,(0,p.Wm)(a)])])])]),ma,(0,p._)("ul",null,[(0,p._)("li",null,[da,ga,fa,(0,p._)("a",va,[ya,(0,p.Wm)(a)])])]),ha,(0,p._)("ul",null,[(0,p._)("li",null,[wa,ja,_a,xa,Ua,qa,Ea,(0,p._)("a",Wa,[Na,(0,p.Wm)(a)])])]),Aa,(0,p._)("ul",null,[(0,p._)("li",null,[Oa,Sa,Pa,(0,p._)("a",Fa,[Da,(0,p.Wm)(a)]),Ra,(0,p._)("a",Ba,[Ja,(0,p.Wm)(a)])])]),Ta,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Ca,Ia,$a,Qa,za,La,Ma,(0,p._)("a",Ha,[Va,(0,p.Wm)(a)]),Za,(0,p._)("a",Ka,[Xa,(0,p.Wm)(a)])]),Ya]),Ga]),np,(0,p._)("ul",null,[(0,p._)("li",null,[sp,(0,p._)("a",ap,[pp,(0,p.Wm)(a)])])]),ep,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[tp,op,cp,lp,rp,up,ip,kp,(0,p._)("a",bp,[mp,(0,p.Wm)(a)]),dp,(0,p._)("a",gp,[fp,(0,p.Wm)(a)]),vp]),yp]),hp]),wp,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[jp,_p,xp,Up,qp,Ep,Wp,Np,Ap,(0,p._)("a",Op,[Sp,(0,p.Wm)(a)])])]),Pp]),Fp],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);